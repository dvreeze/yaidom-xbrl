<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright 2008 XBRL International. All Rights Reserved. -->
<?xml-stylesheet type="text/xsl" href="../../../infrastructure/test.xsl"?>
<testcase
  xmlns="http://xbrl.org/2008/conformance"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://xbrl.org/2008/conformance ../../../infrastructure/test.xsd"
  xmlns:xbrlcfie="http://xbrl.org/2010/custom-function/error"
  xmlns:binding="http://xbrl.org/2008/binding/errors"
  xmlns:label="http://xbrl.org/2008/label/errors"
  xmlns:i="http://www.xbrl.org/int/gl/FR-source-instance"
  xmlns:reference="http://xbrl.org/2008/reference/errors"
  xmlns:err="http://www.w3.org/2005/xqt-errors"  
  >
  <creator>
    <name>Herm Fischer</name>
    <email>fischer@markv.com</email>
  </creator>
  <number>60200</number>
  <name>Examples of function implementations in XPath 2</name>
  <description>
    Examples of functions using XPath 2 to implement the processing
  </description>

  <variation id="V-01">
    <name>
        Formula a = b + c, where a is implemented by a locally defined
        function.
    </name>
    <description>
      Usage pattern of simple local XPath-defined function.
    </description>
    <data>
      <schema>abc.xsd</schema>
      <instance readMeFirst="true">abc-instance1.xml</instance>  
     <linkbase>abc-formula1.xml</linkbase>
    </data>
    <result>
      <instance>abc-result1.xml</instance> 
    </result>
  </variation>

  <variation id="V-01a">
    <name>
        Formula a = b + c, c = d + e, e = f + g, where a is implemented by a locally defined
        function, using multiple steps.
    </name>
    <description>
      Usage pattern of simple local XPath-defined function.
    </description>
    <data>
      <schema>abc.xsd</schema>
      <instance readMeFirst="true">abc-instance1a.xml</instance>  
     <linkbase>abc-formula1a.xml</linkbase>
    </data>
    <result>
      <instance>abc-result1a.xml</instance> 
    </result>
  </variation>

  <variation id="V-02">
    <name>
        Formula a = b + c, where a is implemented by a function defined
        in a separate linkbase file.
    </name>
    <description>
      Usage pattern of simple local XPath-defined function.
    </description>
    <data>
      <schema>abc.xsd</schema>
      <instance readMeFirst="true">abc-instance2.xml</instance>  
     <linkbase>abc-formula2.xml</linkbase>
     <linkbase>abc-function2.xml</linkbase>
    </data>
    <result>
      <instance>abc-result1.xml</instance> 
    </result>
  </variation>

  <variation id="V-03">
    <name>
        The function in separate linkbase determines decimals
        precision of result, by looking at the units, and using
        unique decimals numbers by unit (to test that function
        is really being called).
    </name>
    <description>
      Usage pattern of simple local XPath-defined function.
    </description>
    <data>
      <schema>abc.xsd</schema>
      <instance readMeFirst="true">abc-instance3.xml</instance>  
     <linkbase>abc-formula3.xml</linkbase>
     <linkbase>abc-function3.xml</linkbase>
    </data>
    <result>
      <instance>abc-result3.xml</instance> 
    </result>
  </variation>

  <variation id="V-04">
    <name>
        The function is a recursive implementation of integer exponentiation
    </name>
    <description>
      Usage pattern of function with recursion
    </description>
    <data>
      <schema>power.xsd</schema>
      <instance readMeFirst="true">power-instance1.xml</instance>  
     <linkbase>power-formula1.xml</linkbase>
    </data>
    <result>
      <instance>power-result1.xml</instance> 
    </result>
  </variation>

  <variation id="V-05">
    <name>
        Present value calculation
    </name>
    <description>
      Usage pattern of function P = the present value of amount A, due n years from now, at r = the rate of interest.
For example, someone contracts to pay you $100,000 in ten years. What's that worth right now, if they changed their mind and decided to paid you upfront? 
At interest compounded annually:
P = A/(1 + r)**n  This requires the power function from V-04.
    </description>
    <data>
      <schema>present-value.xsd</schema>
      <instance readMeFirst="true">present-value-instance1.xml</instance>  
     <linkbase>present-value-formula1.xml</linkbase>
    </data>
    <result>
      <instance>present-value-result1.xml</instance> 
    </result>
  </variation>

  <variation id="V-06">
    <name>
        Formula trim($arg) where trim is implemented by a locally defined
        function.
    </name>
    <description>
      Usage pattern of simple local XPath-defined function.
    </description>
    <data>
      <schema>abc.xsd</schema>
      <instance readMeFirst="true">trim-instance1.xml</instance>  
     <linkbase>trim-formula1.xml</linkbase>
    </data>
    <result>
      <instance>trim-result1.xml</instance> 
    </result>
  </variation>

  <variation id="V-07">
    <name>
        Formula isNumeric($arg) where isNumeric is implemented by a locally defined
        function.
    </name>
    <description>
      Usage pattern of simple local XPath-defined function.
    </description>
    <data>
      <schema>abc.xsd</schema>
      <instance readMeFirst="true">isNumeric-instance1.xml</instance>  
     <linkbase>isNumeric-formula1.xml</linkbase>
    </data>
    <result>
      <instance>isNumeric-result1.xml</instance> 
    </result>
  </variation>

  <variation id="V-08">
    <name>
        Formula sum($arg) function test where aspects all match their tests.
    </name>
    <description>
      Usage pattern of simple local XPath-defined function.  Compute the sum of the values of the facts in an input sequence checking that all facts are aspect-matched except for a specified explicit dimension and checking that there is exactly one fact in the sequence for each domain member of the explicit dimension with a specified relationship from the explicit dimension domain member with the specified QName. Throws an exception if the explicit dimension does not have the specified domain member. Make sure that the implementation does not throw exceptions if the data types of any of the input facts are numeric but not xs:decimal. 
    </description>
    <data>
      <schema>abc.xsd</schema>
      <instance readMeFirst="true">sum-instance1.xml</instance>  
     <linkbase>dim-definition.xml</linkbase>
     <linkbase>sum-formula1.xml</linkbase>
    </data>
    <result>
      <instance>sum-result1.xml</instance> 
    </result>
  </variation>

  <variation id="V-09">
    <name>
        Formula sum($arg) where aspects mismatch concept and unit aspects.
    </name>
    <description>
      See V-08
    </description>
    <data>
      <schema>abc.xsd</schema>
      <instance readMeFirst="true">sum-instance2.xml</instance>  
     <linkbase>dim-definition.xml</linkbase>
     <linkbase>sum-formula1.xml</linkbase>
    </data>
    <result>
      <error xmlns:eg='http://abc.com/test1'>eg:aspect-issues</error> 
    </result>
  </variation>

  <variation id="V-10">
    <name>
        Formula sum($arg) where an unexpected dimension member is provided 
        (unexpected member for tested ELR is valid in a different ELR than the linkrole argument of the sum function).
    </name>
    <description>
      See V-08.
The variable values in each step are as follows:

  $mismatchedUnitAspects         empty
  $mismatchedConceptAspects      empty
  $mismatchedIdentifierAspects   empty
  $mismatchedPeriodAspects       empty
  $membersExpected               (test:memC1, test:memC2, test:memC3) 
  $membersReported               (test:memC1, test:memC2, test:memWild) 
  $missingDimensionMembers       "missing member: test:memC3"
  $unexpectedDimensionMembers    "unexpected member: test:memWild"
  $duplicatedReportedMembers     empty
  $aspect-issues                 ("missing member: test:memC3", "unexpected member: test:memWild")
    </description>
    <data>
      <schema>abc.xsd</schema>
      <instance readMeFirst="true">sum-instance3.xml</instance>  
     <linkbase>dim-definition.xml</linkbase>
     <linkbase>sum-formula1.xml</linkbase>
    </data>
    <result>
      <error xmlns:eg='http://abc.com/test1'>eg:aspect-issues</error> 
    </result>
  </variation>

  <variation id="V-11">
    <name>
        Formula sum($arg) where an duplicated dimension member fact is input.
    </name>
    <description>
      See V-08
    </description>
    <data>
      <schema>abc.xsd</schema>
      <instance readMeFirst="true">sum-instance4.xml</instance>  
     <linkbase>dim-definition.xml</linkbase>
     <linkbase>sum-formula1.xml</linkbase>
    </data>
    <result>
      <error xmlns:eg='http://abc.com/test1'>eg:aspect-issues</error> 
    </result>
  </variation>

  <variation id="V-12">
    <name>
        The function is an example with indirect recursion
    </name>
    <description>
      Usage pattern of function with indirect recursion.  
      Function argument type is xs:integer (not schema-element(xbrli:item)).
    fa(int n): if (n gt 0) then 2 * fb(n-1) else 1.
    fb(int n): if (n gt 0) then 5 + fa(n-1) else 2.
    </description>
    <data>
      <schema>abc.xsd</schema>
      <instance readMeFirst="true">indirect-recursion-instance1.xml</instance>  
     <linkbase>indirect-recursion-formula1.xml</linkbase>
    </data>
    <result>
      <instance>indirect-recursion-result1.xml</instance> 
    </result>
  </variation>

  <variation id="V-21">
    <name>
        Same as V-01 but inputs mismatch.
    </name>
    <description>
      Usage pattern of simple local XPath-defined function with an implementation input missing.
    </description>
    <data>
      <schema>abc.xsd</schema>
      <instance readMeFirst="true">abc-instance21.xml</instance>  
     <linkbase>abc-formula21.xml</linkbase>
    </data>
    <result>
      <error>xbrlcfie:inputMismatch</error>
    </result>
  </variation>

  <variation id="V-22">
    <name>
        Same as V-21 but inputs mismatch.
    </name>
    <description>
      Usage pattern of simple local XPath-defined function with an signature input missing.
    </description>
    <data>
      <schema>abc.xsd</schema>
      <instance readMeFirst="true">abc-instance22.xml</instance>  
     <linkbase>abc-formula22.xml</linkbase>
    </data>
    <result>
      <error>xbrlcfie:inputMismatch</error>
    </result>
  </variation>

  <variation id="V-23">
    <name>
        Same as V-01 but two signatures for one implementation.
    </name>
    <description>
      Usage pattern of simple local XPath-defined function with two signatures for one implementation.
    </description>
    <data>
      <schema>abc.xsd</schema>
      <instance readMeFirst="true">abc-instance23.xml</instance>  
     <linkbase>abc-formula23.xml</linkbase>
    </data>
    <result>
      <error>xbrlcfie:tooManyCFIRelationships</error>
    </result>
  </variation>

  <variation id="V-24">
    <name>
        Same as V-01 but one signature has two implementations.
    </name>
    <description>
      Usage pattern of simple local XPath-defined function with one signature with two implementations.
    </description>
    <data>
      <schema>abc.xsd</schema>
      <instance readMeFirst="true">abc-instance24.xml</instance>  
     <linkbase>abc-formula24.xml</linkbase>
    </data>
    <result>
      <error>xbrlcfie:tooManyCFIRelationships</error>
    </result>
  </variation>

  <variation id="V-25">
    <name>
        Same as V-01 but one implementation has no corresponding signature.
    </name>
    <description>
      Usage pattern of simple local XPath-defined function with one implementation with no related signature.
    </description>
    <data>
      <schema>abc.xsd</schema>
      <instance readMeFirst="true">abc-instance25.xml</instance>  
     <linkbase>abc-formula25.xml</linkbase>
    </data>
    <result>
      <error>xbrlcfie:missingCFIRelationship</error>
    </result>
  </variation>

	<variation id="V-26">
		<name>
        Tests that a custom function definition that is used without an implementation raises an XPath error.
    </name>
		<description>Tests that a custom function definition that is used without an implementation raises an XPath error.</description>
		<data>
			<schema>abc.xsd</schema>
			<instance readMeFirst="true">abc-instance26.xml</instance>
			<linkbase>abc-formula26.xml</linkbase>
		</data>
		<result>
			<error>err:XPST0017</error>
		</result>
	</variation>


</testcase>





