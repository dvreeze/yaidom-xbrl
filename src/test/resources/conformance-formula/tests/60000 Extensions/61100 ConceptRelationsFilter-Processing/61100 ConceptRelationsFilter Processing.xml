<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright 2008 XBRL International. All Rights Reserved. -->
<?xml-stylesheet type="text/xsl" href="../../../infrastructure/test.xsl"?>
<testcase
  xmlns="http://xbrl.org/2008/conformance"
  xmlns:xbrli="http://www.xbrl.org/2003/instance"
  xmlns:xfi="http://www.xbrl.org/2008/function/instance"
  xmlns:xfie="http://www.xbrl.org/2008/function/instance/error"
  xmlns:xqt-err="http://www.w3.org/2005/xqt-errors"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="
    http://xbrl.org/2008/conformance   ../../../infrastructure/test.xsd
  ">
  <creator>
    <name>Herm Fischer</name>
    <email>fischer@markv.com</email>
  </creator>

  <number>61100</number>

  <name>Concept relations filter</name>

  <description>
    Tests concept relations filter.
  </description>

  <variation id="V-01">
    <name>Children of def-test arcrole in link role link1</name>
    <description>
       Concept relation filter provides child facts by variable reference for specifying source concept.
     </description>
      
    <data>
      <schema>nav-rel-test1.xsd</schema>
      <linkbase>nav-test-child-formula.xml</linkbase>
      <instance readMeFirst="true">nav-test-child-instance.xml</instance>
    </data>
    <result>
      <instance>nav-test-child-result.xml</instance>
    </result>
  </variation>
  
  <!--

  <variation id="V-02">
    <name>Descendants to 2 levels of def-test arcrole in link role link1</name>
    <description>
     </description>
      
    <data>
      <schema>nav-rel-test1.xsd</schema>
      <linkbase>nav-test-2child-formula.xml</linkbase>
      <instance readMeFirst="true">nav-test-2child-instance.xml</instance>
    </data>
    <result>
      <instance>nav-test-2child-result.xml</instance>
    </result>
  </variation>

  <variation id="V-03">
    <name>Children or self of def-test arcrole in link role link1</name>
    <description>
     </description>
      
    <data>
      <schema>nav-rel-test1.xsd</schema>
      <linkbase>nav-test-child-or-self-formula.xml</linkbase>
      <instance readMeFirst="true">nav-test-child-or-self-instance.xml</instance>
    </data>
    <result>
      <instance>nav-test-child-or-self-result.xml</instance>
    </result>
  </variation>

  <variation id="V-04">
    <name>Parents of def-test arcrole in link role link1</name>
    <description>
     </description>
      
    <data>
      <schema>nav-rel-test1.xsd</schema>
      <linkbase>nav-test-parent-formula.xml</linkbase>
      <instance readMeFirst="true">nav-test-parent-instance.xml</instance>
    </data>
    <result>
      <instance>nav-test-parent-result.xml</instance>
    </result>
  </variation>

  <variation id="V-05">
    <name>Sibling of def-test arcrole in link role link1</name>
    <description>
     </description>
      
    <data>
      <schema>nav-rel-test1.xsd</schema>
      <linkbase>nav-test-sibling-formula.xml</linkbase>
      <instance readMeFirst="true">nav-test-sibling-instance.xml</instance>
    </data>
    <result>
      <instance>nav-test-sibling-result.xml</instance>
    </result>
  </variation>

  <variation id="V-06">
    <name>Sibling or self of presentation arcrole in link role link2</name>
    <description>
     </description>
      
    <data>
      <schema>nav-rel-test1.xsd</schema>
      <linkbase>nav-test-sibling-or-self-formula.xml</linkbase>
      <instance readMeFirst="true">nav-test-sibling-or-self-instance.xml</instance>
    </data>
    <result>
      <instance>nav-test-sibling-or-self-result.xml</instance>
    </result>
  </variation>
  
  -->

  <variation id="V-07">
    <name>Roots presentation arcrole in link role link2</name>
    <description>
       Concept-relation filter provides root facts by sibling relationship to the xfi:root source object, specified by qname.
     </description>
      
    <data>
      <schema>nav-rel-test1.xsd</schema>
      <linkbase>nav-test-roots-formula.xml</linkbase>
      <instance readMeFirst="true">nav-test-roots-instance.xml</instance>
    </data>
    <result>
      <instance>nav-test-roots-result.xml</instance>
    </result>
  </variation>

  <variation id="V-07a">
    <name>Roots presentation arcrole in all presentation link roles</name>
    <description>
       Extends v-07 to provide roots in all link roles, testing linkroleExpression (and arcroleExpression).
     </description>
      
    <data>
      <schema>nav-rel-test1.xsd</schema>
      <linkbase>nav-test-roots-all-link-roles-formula.xml</linkbase>
      <instance readMeFirst="true">nav-test-roots-all-link-roles-instance.xml</instance>
    </data>
    <result>
      <instance>nav-test-roots-all-link-roles-result.xml</instance>
    </result>
  </variation>

<!--
  <variation id="V-08">
    <name>Roots and descendants presentation arcrole in link role link2</name>
    <description>
     </description>
      
    <data>
      <schema>nav-rel-test1.xsd</schema>
      <linkbase>nav-test-roots2-formula.xml</linkbase>
      <instance readMeFirst="true">nav-test-roots2-instance.xml</instance>
    </data>
    <result>
      <instance>nav-test-roots2-result.xml</instance>
    </result>
  </variation>

-->
  <variation id="V-09">
    <name>Roll up of relationships with non-abstract concepts with fallback values</name>
    <description>
       Per discussions with Victor Morilla, this case tests the mechanism where relationships of the pattern
       A = B + C would be tested with an assertion, with either A or B or C optional (fall back value).  The
       formula adds parent + children, and tests that an abstract in either the to or from of a relationship
       is not used to initiate a calculation, but that an initiated calculation can have either to or from
       falling back.  In this instance A and A1131 are missing, and fall back values reflect their contribution
       to the result.
     </description>
      
    <data>
      <schema>nav-rel-test-with-abstract.xsd</schema>
      <linkbase>nav-rel-test-with-abstract-presentation.xml</linkbase>
      <linkbase>nav-test-with-abstract-formula.xml</linkbase>
      <instance readMeFirst="true">nav-test2-instance.xml</instance>
    </data>
    <result>
      <instance>nav-test2-result.xml</instance>
    </result>
  </variation>

  <variation id="V-20">
    <name>Calculation linkbase validation, pos and neg weight sequences, exact, no inconsistency</name>
    <description>
       Calculation relations with their PSVI-typed weight attribute are used to filter summation-item 
       relations to produce separate child sequences, posChildValues and negChildValues, 
       each respectively a sequence of those children, the first sequence with weights +1 
       and the second with weights -1 (e.g., for an SEC like case where weights can only have unitary value).  
       Precondition blocks firing if no children (e.g., parent is a tree leaf).  
       The value assertion is exact (no rounding considering decimals attribute).
       These should be the 6 (satisfied) assertions:
        A = A1 + A2 + A3,
        A1 = A11 + A12 + A13,
        A11 = A111 - A113 (A112 has weight 11, ignored),
        A12 = A121 + A122,
        A2 = A21, and
        A21 = A211. 
     </description>
      
    <data>
      <schema>nav-rel-test1.xsd</schema>
      <linkbase>nav-rel-test1-detached-pos-neg-calculation.xml</linkbase>
      <linkbase>calc-lb-exact-sum-pos-neg-children-formula.xml</linkbase>
      <instance readMeFirst="true">calc-lb-exact-sum-pos-neg-children-instance-ok.xml</instance>
    </data>
    <result>
      <assertionTests 
         assertionID="calc-linkbase-assertion"
         countSatisfied="6"
         countNotSatisfied="0" />      
    </result>
  </variation>

  <variation id="V-20a">
    <name>Calculation linkbase validation, pos and neg weight sequences, exact, one inconsistency</name>
    <description>
       Same as V-20, but one inconsistent fact item is introduced, causing two calculation assertions to be unsuccessful.  There are two inconsistencies because the inconsistent fact is both a sum (having children) and contributor to its parent.
     </description>
      
    <data>
      <schema>nav-rel-test1.xsd</schema>
      <linkbase>nav-rel-test1-detached-pos-neg-calculation.xml</linkbase>
      <linkbase>calc-lb-exact-sum-pos-neg-children-formula.xml</linkbase>
      <instance readMeFirst="true">calc-lb-exact-sum-pos-neg-children-instance-err1.xml</instance>
    </data>
    <result>
      <assertionTests 
         assertionID="calc-linkbase-assertion"
         countSatisfied="4"
         countNotSatisfied="2" />      
    </result>
  </variation>

  <variation id="V-21">
    <name>Calculation linkbase validation, weighted, exact, no inconsistency</name>
    <description>
       Calculation relations with the effective arc element's PSVI-typed weight attribute are used to filter parent and family members (all fact values matching parent in aspects such as period, etc) to produce a generalVariable, weightedChildValues, which is a sequence of those family members whose QNames are 1-level calc linkbase descendants, mulitplied by the PSVI-typed weight attribute.  The concept-relation-filter can't be used here, because the relationship (arc) node is needed to access the weight attribute, so the xfi functions are used instead.  Precondition blocks firing if no children (e.g., parent is a tree leaf).  The value assertion is exact (no rounding considering decimals attribute).
     </description>
      
    <data>
      <schema>nav-rel-test1.xsd</schema>
      <linkbase>nav-rel-test1-detached-calculation.xml</linkbase>
      <linkbase>calc-lb-exact-sum-weighted-children-formula.xml</linkbase>
      <instance readMeFirst="true">calc-lb-exact-sum-weighted-children-instance-ok.xml</instance>
    </data>
    <result>
      <assertionTests 
         assertionID="calc-linkbase-assertion"
         countSatisfied="6"
         countNotSatisfied="0" />      
    </result>
  </variation>

  <variation id="V-21a">
    <name>Calculation linkbase validation, weighted, exact, one inconsistency</name>
    <description>
       Same as V-21, but one inconsistent fact item is introduced, causing two calculation assertions to be unsuccessful.  There are two inconsistencies because the inconsistent fact is both a sum (having children) and contributor to its parent.
     </description>
      
    <data>
      <schema>nav-rel-test1.xsd</schema>
      <linkbase>nav-rel-test1-detached-calculation.xml</linkbase>
      <linkbase>calc-lb-exact-sum-weighted-children-formula.xml</linkbase>
      <instance readMeFirst="true">calc-lb-exact-sum-weighted-children-instance-err1.xml</instance>
    </data>
    <result>
      <assertionTests 
         assertionID="calc-linkbase-assertion"
         countSatisfied="4"
         countNotSatisfied="2" />      
    </result>
  </variation>

  <variation id="V-21b">
    <name>Calculation linkbase validation, filtered parents, weighted, exact, no inconsistency</name>
    <description>
       Same as v-21, but $parent is filtered to only bind on parent concepts of arcs in the currently evaluating
       $linkRole.  More efficient in processing time, but adds another generalVariable and step.  Demonstrates
       the concept-relationships function from root with all descendant relationships, and use of relationship-from-concept
       function to obtain QName of parent of relationship's effective arc.
     </description>
      
    <data>
      <schema>nav-rel-test1.xsd</schema>
      <linkbase>nav-rel-test1-detached-calculation.xml</linkbase>
      <linkbase>calc-lb-exact-sum-weighted-children-formula2.xml</linkbase>
      <instance readMeFirst="true">calc-lb-exact-sum-weighted-children-instance2-ok.xml</instance>
    </data>
    <result>
      <assertionTests 
         assertionID="calc-linkbase-assertion"
         countSatisfied="6"
         countNotSatisfied="0" />      
    </result>
  </variation>
<!--
  <variation id="V-22">
    <name>Calculation linkbase validation, decimals rounding, no inconsistency</name>
    <description>
       The decimals attribute is processed for rounding.  Calculation relations with their PSVI-typed weight and fact decimal attributes are used to filter parent and family members (all fact values matching parent in aspects such as period, etc) to produce a generalVariable, weightedChildValues, which is a sequence of those family members whose QNames are 1-level calc linkbase descendants, mulitplied by the PSVI-typed weight attribute, and rounded by the fact item PSVI-typed decimals attribute.  Precondition blocks firing if no children (e.g., parent is a tree leaf).  The value assertion is exact (no rounding considering decimals attribute).  Formatted messages are available to produce human-readable assertion results. Important note: the round-half-to-even function requires xfi:decimals (inferred or as reported) for the attribute that it calls 'precision', even if the fact is reported as @precision.  (An additional if () would be required to process 'INF' decimals values.)
     </description>
      
    <data>
      <schema>nav-rel-test1.xsd</schema>
      <linkbase>nav-rel-test1-detached-calculation.xml</linkbase>
      <linkbase>calc-lb-sum-weighted-rounded-children-formula.xml</linkbase>
      <instance readMeFirst="true">calc-lb-sum-weighted-rounded-children-instance-ok.xml</instance>
    </data>
    <result>
      <assertionTests 
         assertionID="calc-linkbase-assertion"
         countSatisfied="6"
         countNotSatisfied="0" />      
    </result>
  </variation>


  <variation id="V-23">
    <name>Calculation linkbase validation, decimals rounding, one inconsistency</name>
    <description>
       Same as V-22, but one inconsistent fact item is introduced, causing two calculation assertions to be unsuccessful.  There are two inconsistencies because the inconsistent fact is both a sum (having children) and contributor to its parent.
     </description>
      
    <data>
      <schema>nav-rel-test1.xsd</schema>
      <linkbase>nav-rel-test1-detached-calculation.xml</linkbase>
      <linkbase>calc-lb-sum-weighted-rounded-children-formula.xml</linkbase>
      <instance readMeFirst="true">calc-lb-sum-weighted-rounded-children-instance-err1.xml</instance>
    </data>
    <result>
      <assertionTests 
         assertionID="calc-linkbase-assertion"
         countSatisfied="4"
         countNotSatisfied="2" />      
    </result>
  </variation>


  <variation id="V-24">
    <name>Calculation linkbase validation, threshold test, no inconsistency</name>
    <description>
       A threshold-based test is used. As with V-20, the sum of weighted children and parent are compared, but within absolute value of threshold.  If above threshold an error is reported. 
     </description>
      
    <data>
      <schema>nav-rel-test1.xsd</schema>
      <linkbase>nav-rel-test1-detached-calculation.xml</linkbase>
      <linkbase>calc-lb-threshold-sum-weighted-children-formula.xml</linkbase>
      <instance readMeFirst="true">calc-lb-threshold-sum-weighted-children-instance-ok.xml</instance>
    </data>
    <result>
      <assertionTests 
         assertionID="calc-linkbase-assertion"
         countSatisfied="6"
         countNotSatisfied="0" />      
    </result>
  </variation>


  <variation id="V-25">
    <name>Calculation linkbase validation, decimals rounding, one inconsistency</name>
    <description>
       Same as V-22, but two inconsistent fact item is introduced, causing one calculation assertions to be unsuccessful.  There is only one inconsistency because the inconsistent facts are leaf nodes that contribute only to their parent (unlike V-21 and V-23 where the inconsistencies are intermediate nodes, not leaf nodes).
     </description>
      
    <data>
      <schema>nav-rel-test1.xsd</schema>
      <linkbase>nav-rel-test1-detached-calculation.xml</linkbase>
      <linkbase>calc-lb-threshold-sum-weighted-children-formula.xml</linkbase>
      <instance readMeFirst="true">calc-lb-threshold-sum-weighted-children-instance-err1.xml</instance>
    </data>
    <result>
      <assertionTests 
         assertionID="calc-linkbase-assertion"
         countSatisfied="5"
         countNotSatisfied="1" />      
    </result>
  </variation>

  <variation id="V-30">
    <name>Movement pattern by Charlie Hoffman</name>
    <description>
     </description>
      Automates a movement pattern.  Presentation tree has movement subtrees each with beginning balance, subtree of changes, and ending balance.  Assertion's variables are:  (1) general variable $movementParent binds to each movement subtree parent; (2) general variable $movementItems binds to sequence of all QNames that are descendants of pattern subtree (e.g., all balances and changes); (3) fact variable $changes binds to all descendants that are duration items, subpartitioning by dates; (4) fact variable $endingBalance binds to descendant items that are instant matching end of subpartitioned duration; (5) fact variable $startingBalance binds to descendant itmes that are instant matching beginning of subpartitioned duration; (6) assertion is fired.
    <data>
      <schema>MovementsAnalysis.xsd</schema>
      <linkbase>MovementsAnalysis-formula.xml</linkbase>
      <instance readMeFirst="true">MovementsAnalysis-instance.xml</instance>
    </data>
    <result>
      <assertionTests 
         assertionID="movement-assertion"
         countSatisfied="4"
         countNotSatisfied="0" />      
    </result>
  </variation>

  <variation id="V-31">
    <name>Movement pattern with error</name>
    <description>
     </description>
      Same as V-20 but with one error.
    <data>
      <schema>MovementsAnalysis.xsd</schema>
      <linkbase>MovementsAnalysis-formula.xml</linkbase>
      <instance readMeFirst="true">MovementsAnalysis2-instance.xml</instance>
    </data>
    <result>
      <assertionTests 
         assertionID="movement-assertion"
         countSatisfied="3"
         countNotSatisfied="1" />      
    </result>
  </variation>
  -->
  
  <!-- action item to Herm: rewrite small versions of these
  <variation id="V-32">
    <name>Total pattern from us-gaap</name>
    <description>
     </description>
      Formula is an attempt at a generalized total (roll-up) formula for us-gaap style presentation linkbases.
      Taxonomy is an extracted schedule of us-gaap 2009 ci, with use of total label to recognize total
      from sibling and descendant contributing non-total items.  Data
      from of US GAAP Preparer's Guide, Figure 73 (http://www.xbrl.us/Documents/PreparersGuide.pdf).  
    <data>
      <schema>usgaap-ci-09b1.xsd</schema>
      <linkbase>usgaap-ci-09b1-definition.xml</linkbase>
      <linkbase>usgaap-ci-09b1-presentation.xml</linkbase>
      <linkbase>usgaap-ci-09b1-totals-formula.xml</linkbase>
      <instance readMeFirst="true">usgaap-ci-09b1-totals-instance.xml</instance>
    </data>
    <result>
      <assertionTests 
         assertionID="total-assertion"
         countSatisfied="5"
         countNotSatisfied="0" />      
    </result>
  </variation>

  <variation id="V-33">
    <name>Movement pattern from us-gaap</name>
    <description>
     </description>
      Formula is an attempt at a generalized movement (roll-forward) formula for us-gaap style presentation linkbases.
      Taxonomy is an extracted schedule of us-gaap 2009 ci, with multiple start and end balances in the
      same line items siblings of the same abstract parent (to ensure filtering accomodates this).  Data
      from of US GAAP Preparer's Guide, Figure 73 (http://www.xbrl.us/Documents/PreparersGuide.pdf).  The
      period filters for beginning and ending balance do not cover period, but the changes do cover, assuring
      that if there were multiple duration periods, then they would be co-matched.  However for those
      periods with no changes (as in source data figure), the beginning balance period filter looks for one
      year earlier than the ending balance (instead of period-start of duration).  If there were quarterly
      returns (of durations 1-3 Qtrs), then the beginning balance period filter may need to look for
      prior 1Q, 2Q, 3Q, and 4Q (per comments in formula).  (Prior month arithmetic works ok for instant dates 
      of end of month (midnight of first of month) but would not for end dates of 12/31T00 (instead of T24),
      but this is not expected in accounting).
    <data>
      <schema>usgaap-ci-09b1.xsd</schema>
      <linkbase>usgaap-ci-09b1-definition.xml</linkbase>
      <linkbase>usgaap-ci-09b1-presentation.xml</linkbase>
      <linkbase>usgaap-ci-09b1-movements-formula.xml</linkbase>
      <instance readMeFirst="true">usgaap-ci-09b1-movements-instance.xml</instance>
    </data>
    <result>
      <assertionTests 
         assertionID="movement-assertion"
         countSatisfied="5"
         countNotSatisfied="0" />      
    </result>
  </variation>
  -->

  <variation id="V-41">
    <name>Test for minimum required decimals precision using filter which has variable reference</name>
    <description>
      Per suggestion by V. Morella, formula uses Concept Relations Filter to determine which facts of an
      instance do not meet the minimum precision expressed as decimals, per requirement by a regulator.
      For example, a number must be reported as decimals accurate to thousands (decimals -3) but was reported
      accurate to hundreds of thousands (-5).
      In order to use Concept Relations Filter, first fact variable binds to an item, and second fact variable
      also binds to same item (so that the item can be tested by a variable reference).
      Requires that the test expression of the filter allow a variable reference (that of the item being filtered).
      Both fact variables bind when precision is inadequate.  Assertion test specifies false, so that failure
      message is produced when both fact variables bind.
     </description>
    <data>
      <schema>min-reported-precision.xsd</schema>
      <linkbase>min-reported-precision-linkbase.xml</linkbase>
      <instance readMeFirst="true">min-reported-precision-with-filter-instance.xml</instance>
    </data>
    <result>
      <assertionTests 
         assertionID="min-required-precision-assertion"
         countSatisfied="0"
         countNotSatisfied="3" />      
    </result>
  </variation>

  <variation id="V-42">
    <name>Test for minimum required decimals precision using function</name>
    <description>
      Per suggestion by V. Morella, formula uses Concept Relationships Function to determine which facts of an
      instance do not meet the minimum precision expressed as decimals, per requirement by a regulator.
      For example, a number must be reported as decimals accurate to thousands (decimals -3) but was reported
      accurate to hundreds of thousands (-5).
      First fact variable binds to an item, second general variable returns minimum precision attribute of
      relationship arc from item's concept to root parent.
      Assertion is true when precision is adequate, false otherwise.
     </description>
    <data>
      <schema>min-reported-precision.xsd</schema>
      <linkbase>min-reported-precision-linkbase.xml</linkbase>
      <instance readMeFirst="true">min-reported-precision-with-function-instance.xml</instance>
    </data>
    <result>
      <assertionTests 
         assertionID="min-required-precision-assertion"
         countSatisfied="3"
         countNotSatisfied="3" />      
    </result>
  </variation>
</testcase>


