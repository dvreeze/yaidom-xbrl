<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright 2008 XBRL International. All Rights Reserved. -->
<?xml-stylesheet type="text/xsl" href="../../../infrastructure/test.xsl"?>
<testcase
  xmlns="http://xbrl.org/2008/conformance"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://xbrl.org/2008/conformance ../../../infrastructure/test.xsd"
  xmlns:xbrlfe="http://xbrl.org/2008/formula/error"
  xmlns:binding="http://xbrl.org/2008/binding/errors"
  xmlns:label="http://xbrl.org/2008/label/errors"
  xmlns:reference="http://xbrl.org/2008/reference/errors"  
  xmlns:xbrlvarscopee="http://xbrl.org/2010/variable/variables-scope/error"
  >
  <creator>
    <name>Herm Fischer</name>
    <email>fischer@markv.com</email>
  </creator>
  <number>60600</number>
  <name>Variables Scope examples</name>
  <description>
    Examples of variables scope processing
  </description>

  <variation id="V-01">
    <name>
        variables-scope method of chaining
        A = B + C chained from C = D + E
    </name>
    <description>
      Usage pattern example where first formula is chained from result of second.
    </description>
    <data>
      <xsd>abcde.xsd</xsd>
      <instance readMeFirst="true">abcde-instance1.xml</instance>  
     <linkbase>abcde-formula1.xml</linkbase>
    </data>
    <result>
      <instance>abcde-result1.xml</instance> 
    </result>
  </variation>

  <variation id="V-02">
    <name>
        Same but double chaining
        A = B + C + E chained from C = D + E and E = F + G
    </name>
    <description>
      Variation on V-01 with nested dependencies
    </description>
    <data>
      <xsd>abcdefg.xsd</xsd>
      <instance readMeFirst="true">abcdefg-instance1.xml</instance>  
     <linkbase>abcdefg-formula1.xml</linkbase>
    </data>
    <result>
      <instance>abcdefg-result1.xml</instance> 
    </result>
  </variation>

  <variation id="V-03">
    <name>
        Same as V-02 but cycle by chaining
        A = B + C + E chained from C = D + E and E = F + G + A
    </name>
    <description>
      Variation on V-02 with nested dependencies cyclic (directed cycle in variables-scope relationships)
    </description>
    <data>
      <xsd>abcdefg.xsd</xsd>
      <instance readMeFirst="true">abcdefga-instance1.xml</instance>  
     <linkbase>abcdefga-formula1.xml</linkbase>
    </data>
    <result expected="invalid">
      <!-- expect XBRL 2.1 directed cycle not allowed error -->
    </result>
  </variation>

  <variation id="V-04">
    <name>
        two formulas produce output to two different instances
        A = B + C (to standard output instance) chained from C = D + E (to temp-c-instance)
    </name>
    <description>
      Example of variables scoping across different intances.
    </description>
    <data>
      <xsd>abcde.xsd</xsd>
      <instance readMeFirst="true">abcde-instance2.xml</instance>  
     <linkbase>abcde-formula2.xml</linkbase>
    </data>
    <result>
      <error>xbrlvarscopee:differentInstances</error>
    </result>
  </variation>

  <variation id="V-05">
    <name>
        Two formulas related by variables-scope have different aspect models.
    </name>
    <description>
        Source formula has non-dimensional aspect model, target has dimensional aspect model.
    </description>
    <data>
      <xsd>abcde.xsd</xsd>
      <instance readMeFirst="true">abcde-instance3.xml</instance>  
     <linkbase>abcde-formula3.xml</linkbase>
    </data>
    <result>
      <error>xbrlvarscopee:conflictingAspectModels</error>
    </result>
  </variation>

  <!-- these tests are in 60400 directory
  <variation id="V-21">
    <name>
        Example of sequences of typed-dimension filtered variables.
    </name>
    <description>
      Adapted from 60400 v21, which used instance chaining, here to use variable-scope chaining.
      Usage pattern contributed by Victor, discussed in Madrid Face-to-face meeting 2012-06-01.
      Table has x, y, and z in two typed dimensions a and b.
      Assertion tests that sum of the y's for which dimensionally-matched x lt 10
      equals sum of the z's for which dimensionally-matched x gt 10.
    </description>
    <data>
      <schema>xyz_ab.xsd</schema>
      <instance readMeFirst="true">xyz_ab-instance1.xml</instance>  
     <linkbase>xyz_ab-formula1.xml</linkbase>
    </data>
    <result>
      <assertionTests 
         assertionID="assertion"
         countSatisfied="1"
         countNotSatisfied="0" />
    </result> 
  </variation>

  <variation id="V-22">
    <name>
        Example of V-21 with uncovered typed dimension for partitioning.
       Adapted from 60400 v22 as with V21 above.
    </name>
    <description>
      Same as V-21 but a typed dimension, c, is added to partition (implicitly filter) the tests
      for each c dimension value.
    </description>
    <data>
      <schema>xyz_abc.xsd</schema>
      <instance readMeFirst="true">xyz_abc-instance1.xml</instance>  
     <linkbase>xyz_abc-formula1.xml</linkbase>
    </data>
    <result>
      <assertionTests 
         assertionID="assertion"
         countSatisfied="2"
         countNotSatisfied="0" />
    </result>
    -->
    
</testcase>





