<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright 2008 XBRL International. All Rights Reserved. -->
<?xml-stylesheet type="text/xsl" href="../../../infrastructure/test.xsl"?>
<testcase
  xmlns="http://xbrl.org/2008/conformance"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://xbrl.org/2008/conformance ../../../infrastructure/test.xsd"
  xmlns:xbrlvarinste="http://xbrl.org/2010/variable/instance/error"
  xmlns:binding="http://xbrl.org/2008/binding/errors"
  xmlns:label="http://xbrl.org/2008/label/errors"
  xmlns:reference="http://xbrl.org/2008/reference/errors"  
  >
  <creator>
    <name>Herm Fischer</name>
    <email>fischer@markv.com</email>
  </creator>
  <number>60400</number>
  <name>Chaining test cases</name>
  <description>
    Tests of chaining
  </description>

  <variation id="V-01">
    <name>
        instance relationships method of chaining
        A = B + C chained from C = D + E
    </name>
    <description>
      Usage pattern example where first formula is chained from result of second.
      The result C is placed in a temporary instance for chaining purposes, and does not
      go into the resulting instance.
    </description>
    <data>
      <schema>abcde.xsd</schema>
      <instance readMeFirst="true">abcde-instance1.xml</instance>  
     <linkbase>abcde-formula1.xml</linkbase>
    </data>
    <result>
      <instance>abcde-result1.xml</instance> 
    </result>
  </variation>

  <variation id="V-02">
    <name>
        same as V-01 but result C is copied to standard output instance
    </name>
    <description>
      V-01 but where
      the result C is placed in a temporary instance for chaining purposes, and then also copied
      to the result instance from the chaining temporary instance.
    </description>
    <data>
      <schema>abcde.xsd</schema>
      <instance readMeFirst="true">abcde-instance2.xml</instance>  
     <linkbase>abcde-formula2.xml</linkbase>
    </data>
    <result>
      <instance>abcde-result2.xml</instance> 
    </result>
  </variation>

  <variation id="V-03">
    <name>
        instance relationships method of chaining
        A = B + C chained from C = D + E chained from E = F + G
    </name>
    <description>
      Same as V-02 but two levels of chaining, all results copied into standard output instance.
    </description>
    <data>
      <schema>abcdefg.xsd</schema>
      <instance readMeFirst="true">abcdefg-instance2.xml</instance>  
     <linkbase>abcdefg-formula2.xml</linkbase>
    </data>
    <result>
      <instance>abcdefg-result2.xml</instance> 
    </result>
  </variation>

  <variation id="V-04">
    <name>
        instances accessed by functions method of chaining
        A = B + C chained from C = D + E chained from E = F + G
    </name>
    <description>
      Same as V-03, all results copied into standard output instance,
      but instead of accessing alternative instance inputs by fact variables,
      functions accessing the instance as a parameter are used, to demonstrate
      that function reference to instance can also sequence production of facts
      before consuming variable set references them.  This is not a practical
      use case, but instead is contrived artificially to demonstrate function
      reference to instances is considered in processing sequence to cause the
      instance fact production before consumption.
    </description>
    <data>
      <schema>abcdefg.xsd</schema>
      <instance readMeFirst="true">abcdefg-instance3.xml</instance>  
      <linkbase>abcdefg-formula3.xml</linkbase>
    </data>
    <result>
      <instance>abcdefg-result3.xml</instance> 
    </result>
  </variation>

  <variation id="V-05">
    <name>
        Instance-variable relationship causes an instanceVariableRecursionCycle errror
    </name>
    <description>
      Same as V-01, A = B + C chained from C = D + E, but both A and C put their
      output in the standard output instance, the A formula access C from
      the standard output instance by an instance-variable relationship,
      causing an instanceVariableRecursionCycle
      error.
    </description>
    <data>
      <schema>abcde.xsd</schema>
      <instance readMeFirst="true">abcde-instance3.xml</instance>  
     <linkbase>abcde-formula3.xml</linkbase>
    </data>
    <result>
      <error>xbrlvarinste:instanceVariableRecursionCycle</error>
    </result>
  </variation>

  <variation id="V-06">
    <name>
        Instance reference by function causes an instanceVariableRecursionCycle errror
    </name>
    <description>
      Same as V-05, A = B + C chained from C = D + E, but both A and C put their
      output in the standard output instance, and the A formula accesses C from the
      instance by function instead of the usual instance-variable relationship,
      causing an instanceVariableRecursionCycle
      error.
    </description>
    <data>
      <schema>abcde.xsd</schema>
      <instance readMeFirst="true">abcde-instance4.xml</instance>  
     <linkbase>abcde-formula4.xml</linkbase>
    </data>
    <result>
      <error>xbrlvarinste:instanceVariableRecursionCycle</error>
    </result>
  </variation>

  <variation id="V-21">
    <name>
        Example of sequences of typed-dimension filtered variables.
    </name>
    <description>
      Usage pattern contributed by Victor, discussed in Madrid Face-to-face meeting 2012-06-01.
      Table has x, y, and z in two typed dimensions a and b.
      Assertion tests that sum of the y's for which dimensionally-matched x lt 10
      equals sum of the z's for which dimensionally-matched x gt 10.
    </description>
    <data>
      <schema>xyz_ab.xsd</schema>
      <instance readMeFirst="true">xyz_ab-instance1.xml</instance>  
     <linkbase>xyz_ab-formula1.xml</linkbase>
    </data>
    <result>
      <assertionTests 
         assertionID="assertion"
         countSatisfied="1"
         countNotSatisfied="0" />
    </result>
  </variation>

  <variation id="V-22">
    <name>
        Example of V-21 with uncovered typed dimension for partitioning.
    </name>
    <description>
      Same as V-21 but a typed dimension, c, is added to partition (implicitly filter) the tests
      for each c dimension value.
    </description>
    <data>
      <schema>xyz_abc.xsd</schema>
      <instance readMeFirst="true">xyz_abc-instance1.xml</instance>  
     <linkbase>xyz_abc-formula1.xml</linkbase>
    </data>
    <result>
      <assertionTests 
         assertionID="assertion"
         countSatisfied="2"
         countNotSatisfied="0" />
    </result>
  </variation>

</testcase>





